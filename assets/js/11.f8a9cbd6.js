(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{357:function(e,a,t){"use strict";t.r(a);var o=t(43),r=Object(o.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"fake-sandbox"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fake-sandbox"}},[e._v("#")]),e._v(" Fake sandbox")]),e._v(" "),t("p",[e._v("Fake sandbox is an approach of creating a "),t("a",{attrs:{href:"./Sandbox_environment.html"}},[e._v("Sandbox environment")]),e._v(" that fakes all of your application external dependencies. The fake external dependencies you create are usually not suitable for production use as they are designed lightweight to be used on a local machine.")]),e._v(" "),t("p",[e._v("This approach comes with the risk of “but it works on my machine” — where the fake external dependency might behave differently when it’s put in production. It’s a good practice to test your application on a production-like environment, therefore if your production is using MySQL for example, you should use MySQL in your sandbox.")]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://martinfowler.com/articles/mocksArentStubs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mocks Aren’t Stubs"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an  "),t("a",{attrs:{href:"https://martinfowler.com/bliki/InMemoryTestDatabase.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("in memory database"),t("OutboundLink")],1),e._v("  is a good example).")])]),e._v(" "),t("h2",{attrs:{id:"backlinks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backlinks"}},[e._v("#")]),e._v(" Backlinks")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"./How_might_we_create_a_sandbox_for_a_cloud_application.html"}},[e._v("How might we create a sandbox for a cloud application?")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"./Fake_sandbox.html"}},[e._v("Fake sandbox")]),e._v(": Create fake cloud services locally")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"./Prefer_cloud_sandbox_for_serverless_architecture.html"}},[e._v("Prefer cloud sandbox for serverless architecture")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"./Fake_sandbox.html"}},[e._v("Fake sandbox")]),e._v(" and "),t("a",{attrs:{href:"./Cloud_sandbox.html"}},[e._v("Cloud sandbox")]),e._v(" comes with their own advantages and disadvantages ("),t("a",{attrs:{href:"./How_might_we_create_a_sandbox_for_a_cloud_application.html"}},[e._v("How might we create a sandbox for a cloud application?")]),e._v("). It is difficult to choose an option when there’s no context is given. Given a context that you are building serverless architecture, you should default to the cloud sandbox approach. All of the downsides of cloud sandbox are invalid when you’re building serverless architecture.")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"./Test_application_and_infrastructure_as_a_whole.html"}},[e._v("Test application and infrastructure as a whole")]),e._v(" "),t("ul",[t("li",[e._v("Even though you can achieve a similar test coverage with "),t("a",{attrs:{href:"./Fake_sandbox.html"}},[e._v("Fake sandbox")]),e._v(", there is a risk of “but it works on my machine” — where integration doesn’t work in the cloud. It’s difficult to fake the cloud services well because "),t("a",{attrs:{href:"./Can_we_fake_unstable_system.html"}},[e._v("Can we fake unstable system?")]),e._v(". This late integration issue introduces a slow feedback cycle as you’ll only discover problems further in your deployment pipeline.")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);