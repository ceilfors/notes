(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{450:function(e,t,a){"use strict";a.r(t);var o=a(43),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"test-application-and-infrastructure-as-a-whole"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-application-and-infrastructure-as-a-whole"}},[e._v("#")]),e._v(" Test application and infrastructure as a whole")]),e._v(" "),a("p",[e._v("The importance of testing the integration between your application and infrastructure should not be neglected when you’re developing a cloud application, especially on a serverless platform. When you’re using a cloud workflow service, like AWS Step Function for example, application logic will leak into your infrastructure — this is an IaC, not an application configuration, therefore it can’t be tested just from the application point of view.")]),e._v(" "),a("p",[a("a",{attrs:{href:"./Cloud_sandbox.html"}},[e._v("Cloud sandbox")]),e._v(" allows you to test your application and infrastructure as a whole stack, altogether. That means, if there’s a system behaviour that you’d like to assert, you’ll be able to test it before you push changes to mainline.")]),e._v(" "),a("p",[e._v("Even though you can achieve a similar test coverage with "),a("a",{attrs:{href:"./Fake_sandbox.html"}},[e._v("Fake sandbox")]),e._v(", there is a risk of “but it works on my machine” — where integration doesn’t work in the cloud. It’s difficult to fake the cloud services well because "),a("a",{attrs:{href:"./Can_we_fake_a_cloud_platform.html"}},[e._v("Can we fake a cloud platform?")]),e._v(". This late integration issue introduces a slow feedback cycle as you’ll only discover problems further in your deployment pipeline.")])])}),[],!1,null,null,null);t.default=n.exports}}]);