(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{377:function(e,t,r){"use strict";r.r(t);var a=r(43),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"to-diagram-is-to-model"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#to-diagram-is-to-model"}},[e._v("#")]),e._v(" To diagram is to model")]),e._v(" "),r("p",[e._v("When it comes to drawing architectural diagrams, many architects prefer to use the tool that allow them to express their diagram in code. For example, a few tools that allow architects to code diagrams are "),r("a",{attrs:{href:"https://plantuml.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PlantUML"),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://structurizr.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Structurizr"),r("OutboundLink")],1),e._v(". The reason of this preference is because of the maintenance burden of updating the diagrams. The idea is we should prefer speed of creation over the aesthetic of the diagrams.")]),e._v(" "),r("p",[e._v("Iâ€™ve attempted to follow this principle but it has never really worked for me, I resorted to drawing the diagrams manually. The reason I do this manually is because of the same reason of I write, it helps me think. Moving and creating boxes and lines help me think about boundaries, whether the system is getting too complicated, or is it evolving in the right direction.")]),e._v(" "),r("p",[e._v("Diagrams as code works for lower level diagram, such as a sequence diagrams.")])])}),[],!1,null,null,null);t.default=o.exports}}]);